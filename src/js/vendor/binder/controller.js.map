{"version":3,"sources":["../../../../src/static/js/binder/controller.js"],"sourcesContent":["import { kebabToCamel, permutations, parseDuration, parseBoolean } from \"./util.js\";\n\n/**\n * @class\n * @name Controller\n * @namespace Controller\n */\nclass Controller extends HTMLElement {\n    /**\n     * @static\n     * @name observedAttributes\n     * @type String[]\n     * @memberof! Controller\n     * @description These are the attributes to watch for and react to changes\n     * This is handled by `attributeChangedCallback()`\n     * The default implementation will call `set{AttributeName}(oldValue, newValue)`\n     */\n    static observedAttributes = [];\n\n    /**\n     * Create a new custom controller element\n     * @param {*} args\n     */\n    constructor(args) {\n        super();\n        this.debug({ msg: `Constructing binder element` });\n\n        // Store for internal data\n        this._internal = {};\n\n        this.root = this;\n        this.args = args || {};\n\n        // Keep track of all attached events\n        this._events = [];\n\n        // Handle <self> node\n        // By default an empty element will only contain it's `self` content\n        // Can also be added manually using <self></self>\n        if (this.innerHTML.trim() === \"\") this.innerHTML = \"<self></self>\";\n        this.self = this.querySelector(\"self\");\n\n        // Add the data-controller attribute to the element\n        this.setAttribute(\"data-controller\", this.localName);\n    }\n\n    /**\n     * Work in progress\n     * If the element has a `<template>` with a `:use-shadow` attribute, it will be used to create a shadow root\n     * When using the shadow DOM the `bind()` call fails\n     */\n    handleShadow() {\n        // If the component has a template then we will clone it and render that to the DOM\n        // If the template has the :use-shadow attribute then we will clone it onto the shadow DOM\n        // This allows isolating the component from the regular DOM (including styles)\n        this.template = this.querySelector(\"template\");\n\n        // The template is optional, if not specified then we will do everything directly on the DOM within the component\n        if (this.template) {\n            this.content = this.template.content.cloneNode(true);\n\n            // Only use the shadowDOM when specified\n            if (this.template.hasAttribute(\":use-shadow\")) {\n                this.debug({ msg: `Initialising shadow DOM` });\n                this.attachShadow({ mode: \"open\" }).appendChild(this.content.cloneNode(true));\n\n                this.root = this.shadowRoot;\n                this.hasShadow = true;\n            } else {\n                this.appendChild(this.content.cloneNode(true));\n                this.hasShadow = false;\n            }\n        }\n    }\n\n    /**\n     * @method\n     * @name connectCallback\n     * @memberof! Controller\n     * @description Called when element is rendered in the DOM\n     * See: {@link https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks}\n     */\n    async connectedCallback() {\n        if (!this.isConnected) return;\n\n        this.handleShadow();\n\n        // Bind the element to this instance\n        this.bind();\n\n        // Init the element\n        if (this.args.hasOwnProperty(\"renderOnInit\")) {\n            this.renderOnInit = parseBoolean(this.args.renderOnInit);\n        } else {\n            this.renderOnInit = true;\n        }\n        await this.init(this.args);\n\n        // Render\n        if (this.args.autoRender) {\n            const interval = parseDuration(this.args.autoRender);\n            this.setAutoRender(interval);\n        }\n\n        if (this.renderOnInit) this.render();\n    }\n\n    /**\n     * Runs when the element in removed from the DOM\n     */\n    disconnectedCallback() {\n        this._events.forEach(e => e.el.removeEventListener(e.eventType, e.event));\n        this._events = [];\n    }\n\n    /**\n     * @method\n     * @name attributeChangedCallback\n     * @memberof! Controller\n     * @description The default implementation of attributeChangedCallback\n     * See: {@link https://developers.google.com/web/fundamentals/web-components/customelements#attrchanges}\n     * We will convert the attribute name to camel case, strip out the leading `data-` or `aria-` parts and call `set{AttributeName}(oldValue, newValue)` (if it exists)\n     * Eg. A change to `data-disabled` will call `setDisabled(oldValue, newValue)`\n     * @param {string} name The name of the attribute that changed\n     * @param {string} oldValue The old value of the attribute\n     * @param {string} newValue The new value of the attribute\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        let handler = name.replace(/^data-/, \"\");\n        handler = handler.replace(/^aria-/, \"\");\n        handler = kebabToCamel(handler);\n        handler = `set${handler.charAt(0).toUpperCase()}${handler.slice(1)}`;\n\n        if (handler in this && typeof this[handler] === \"function\") {\n            this[handler](oldValue, newValue);\n        }\n    }\n\n    /**\n     * @method\n     * @name Controller#emit\n     * @memberof! Controller\n     * @description Emit a new event from this controller\n     * @param {string} eventName The name of the event, automatically prefixed with `${this.localName}:`\n     * @param {object} detail Optional object that is passed in the event under the key `detail`\n     * @param {object} config Optional configuration object that can be passed to `new CustomEvent()`\n     */\n    emit(eventName, detail = {}, config = {}) {\n        this.dispatchEvent(\n            new CustomEvent(eventName, {\n                bubbles: true,\n                cancelable: true,\n                composed: true,\n                detail: detail,\n                ...config,\n            })\n        );\n    }\n\n    /**\n     * @method\n     * @name listenFor\n     * @memberof! Controller\n     * @description Listens for an event to be fired from a child element\n     * @param {Element} target The element to listen for events from, use `window` to listen for global events\n     * @param {string} eventName The name of the event to listen for\n     * @param {function} callback The callback to call when the event is fired\n     */\n    listenFor(target, eventName, callback) {\n        target.addEventListener(eventName, e => callback(e));\n    }\n\n    /**\n     * @method\n     * @name bind\n     * @memberof! Controller\n     * @description Initializes the controller instance\n     * Can be called manaually when the child elements change to force refreshing the controller state\n     * eg. re-attach events etc...\n     */\n    bind() {\n        // We only want to configure the arguments on the first bind()\n        if (!this._internal.bound) {\n            this.#bindArgs();\n        }\n\n        this.#bindEvents();\n        this.#bindDataValues();\n\n        this._internal.bound = true;\n    }\n\n    /**\n     * @method\n     * @name setAutoRender\n     * @memberof! Controller\n     * @description Sets an interval to auto call `this.render()`\n     * Overwrites previously set render intervals\n     * @param {*} interval Duration in milliseconds\n     */\n    setAutoRender(interval) {\n        if (interval === undefined) {\n            console.error(`[${this.localName}] Undefined interval passed to setAutoRender`);\n            return;\n        }\n\n        if (this._internal.autoRenderInterval) {\n            window.clearInterval(this._internal.autoRenderInterval);\n        }\n\n        this._internal.autoRenderInterval = window.setInterval(() => this.render(), interval);\n    }\n\n    /**\n     * @method\n     * @name init\n     * @memberof! Controller\n     * @description Called during the `connectedCallback()` (when an element is created in the DOM)\n     * Expected to be overridden\n     * @param {*} args\n     */\n    async init(args) {}\n\n    /**\n     * @method\n     * @name render\n     * @memberof! Controller\n     * @param {Element} rootNode The root node to search from\n     * @description Re-renders everything with the @render attribute\n     */\n    async render(rootNode = null) {\n        if (!rootNode) rootNode = this;\n\n        this.#findRenderableElements(rootNode).forEach(el => {\n            // Store the original template as an attribute on the element on first render\n            let template = el.getAttribute(\"_template\");\n            if (!template) {\n                template = el.innerText;\n                el.setAttribute(\"_template\", template);\n            }\n\n            // If the element has the attribute with .eval then eval the template\n            // This should be used sparingly and only when the content is trusted\n            const evalMode = el.hasAttribute(`@render.eval`);\n\n            // TODO: Make the replacer syntax configurable\n            let replacerRegex = /\\{(.*?)\\}/g; // Find template vars, eg {var}\n\n            template.replace(replacerRegex, (replacer, key) => {\n                if (evalMode) {\n                    const fn = new Function(`return ${key}`);\n                    template = template.replace(replacer, fn.call(this));\n                } else {\n                    // If not in `evalMode` then we do an eval-like replacement\n                    // We will dig into the controller instance and replace in the variables\n                    // This handles dot notation and array notation\n                    let pos = null;\n\n                    // Split on dots and brackets and strip out any quotes\n                    key.split(/[\\.\\[\\]]/)\n                        .filter(item => !!item)\n                        .forEach(part => {\n                            part = part.replace(/[\"']/g, \"\"); // Strip out square brackets\n                            part = part.replace(/\\(\\)/g, \"\"); // Strip out function parens\n\n                            if (pos == null && part === \"this\") {\n                                pos = this;\n                                return;\n                            }\n\n                            if (pos && part in pos) {\n                                pos = pos[part];\n                            } else {\n                                pos = null;\n                                return;\n                            }\n                        });\n\n                    if (pos == null) pos = \"\";\n                    if (typeof pos === \"function\") pos = pos.call(this);\n                    template = template.replace(replacer, pos.toString() || \"\");\n                }\n            });\n\n            // TODO: This may be innefecient\n            el.innerHTML = template;\n        });\n    }\n\n    /**\n     * @method\n     * @private\n     * @name findRenderableElements\n     * @memberof! Controller\n     * @param {Element} rootNode The root node to search from\n     * @description Find all elements on the controller which have @render attributes\n     * @render is a special action that let's the controller know to render this elements content when the render() method is called\n     */\n    #findRenderableElements(rootNode = null) {\n        if (!rootNode) rootNode = this;\n        return [...rootNode.querySelectorAll(`[\\\\@render]`), ...rootNode.querySelectorAll(`[\\\\@render\\\\.eval]`)].filter(el => this.belongsToController(el));\n    }\n\n    /**\n     * @method\n     * @private\n     * @name bindArgs\n     * @memberof! Controller\n     * @description Bind all attributes on the controller tag into the instance under `this`\n     * Convert kebab-case to camelCase\n     * EG. <controller :some-arg=\"150\" /> will set `this.someArg = 150`\n     */\n    #bindArgs() {\n        this.args = {};\n\n        this.getAttributeNames().forEach(attr => {\n            const value = this.getAttribute(attr);\n            const key = kebabToCamel(attr).replace(\":\", \"\");\n            this.args[key] = value;\n        });\n    }\n\n    /**\n     * @method\n     * @private\n     * @name bindEvents\n     * @memberof! Controller\n     * @description Finds all events within a controller element\n     * Events are in the format `@{eventType}={method}\"`\n     * EG. @click=\"handleClick\"\n     *\n     * The attribute key can also end with a combination of modifiers:\n     * - `.prevent`: Automatically calls `event.preventDefault()`\n     * - `.stop`: Automatically calls `event.stopPropagation()`\n     * - `.eval`: Will evaluate the attribute value\n     */\n    #bindEvents() {\n        // We need to delete all events and before binding\n        // Otherwise we would end up with duplicate events upon muliple bind() calls\n        this._events.forEach(e => e.el.removeEventListener(e.eventType, e.event));\n        this._events = [];\n\n        const bindEvent = (el, eventType, modifier) => {\n            const value = el.getAttribute(`@${eventType}${modifier}`);\n            const action = value.replace(\"this.\", \"\").replace(\"()\", \"\");\n\n            const callable = event => {\n                if (modifier.includes(\".prevent\")) event.preventDefault();\n                if (modifier.includes(\".stop\")) event.stopPropagation();\n\n                if (modifier.includes(\".eval\")) {\n                    const fn = new Function(`${value}`);\n                    fn.call(this);\n                } else {\n                    try {\n                        if (action === \"render\") {\n                            // Render doesn't take an event\n                            this[action].call(this);\n                        } else {\n                            this[action].call(this, event);\n                        }\n                    } catch (e) {\n                        console.error(`Failed to call '${action}' to handle '${event.type}' event on tag '${this.localName}'`, e);\n                    }\n                }\n            };\n\n            el.addEventListener(eventType, callable);\n\n            this._events.push({\n                el: el,\n                event: callable,\n                eventType: eventType,\n            });\n        };\n\n        // Go through all nodes which have events on them\n        // eg. nodes which have any attribute starting with `@`\n        for (let node of this.#findEventNodes()) {\n            if (!this.belongsToController(node)) continue;\n            this.debug({ msg: `Attaching event listeners`, source: node });\n\n            for (let attr of node.getAttributeNames()) {\n                if (!attr.startsWith(\"@\")) continue;\n\n                let [event, modifiers] = attr.replace(\"@\", \"\").split(\".\", 2);\n                modifiers = modifiers ? `.${modifiers}` : \"\";\n\n                // @render and @bind are handled separately\n                if (event === \"render\" || event === \"bind\") continue;\n\n                bindEvent(node, event, modifiers);\n            }\n        }\n    }\n\n    /**\n     * @method\n     * @private\n     * @name findEventNodes\n     * @memberof! Controller\n     * @description Generator returning nodes which have events on them\n     * We do things a little differently depending on whether we are using the shadow DOM or not\n     * If using the light DOM we use `document.evaluate` with an xpath expression\n     * If using the shadow DOM we need to manually iterate through all nodes, which is slower\n     */\n    *#findEventNodes() {\n        // TODO: Actually benchmark this to confirm if it's slower\n        if (this.hasShadow) {\n            const allNodes = this.root.querySelectorAll(\"*\");\n            for (let node of allNodes) {\n                if (node.getAttributeNames().filter(attr => attr.startsWith(\"@\")).length > 0) {\n                    yield node;\n                }\n            }\n        } else {\n            const nodesWithEvents = document.evaluate(`.//*[@*[starts-with(name(), \"@\")]]`, this.root);\n            let eventNode = nodesWithEvents.iterateNext();\n            while (eventNode) {\n                yield eventNode;\n                eventNode = nodesWithEvents.iterateNext();\n            }\n        }\n    }\n\n    /**\n     * @method\n     * @private\n     * @name bindDataValues\n     * @memberof! Controller\n     * @description Find all elements within the controller that has a `@bind` attribute\n     * Each element will have it's value bound to the controller under `this`\n     * The value of the attribute will be converted from kebab-case to camelCase\n     *\n     * EG. <input @bind=\"the-input\" /> will have it's value bound to `this.theInput`\n     */\n    #bindDataValues() {\n        this.data = {};\n        const instance = this;\n\n        const tagToEvent = {\n            \"input|text\": \"keyup\",\n            default: \"change\",\n        };\n\n        // Event handlers for various element types\n        const handlers = {\n            \"input|checkbox\": (instance, varName, e) => {\n                if (!instance.data[varName]) instance.data[varName] = [];\n                if (e.target.checked) {\n                    instance.data[varName].push(e.target.value);\n                } else {\n                    instance.data[varName] = instance.data[varName].filter(item => item !== e.target.value);\n                }\n            },\n            select: (instance, varName, e) => {\n                if (e.target.getAttribute(\"multiple\") !== null) {\n                    instance.data[varName] = Array.from(e.target.selectedOptions).map(item => item.value);\n                } else {\n                    instance.data[varName] = e.target.value;\n                }\n            },\n            default: (instance, varName, e) => (instance.data[varName] = e.target.value),\n        };\n\n        // Logic to actually bind an element to the controller\n        const bindData = (el, modifier) => {\n            const elType = this.#getElementType(el);\n            const eventType = tagToEvent[elType] || tagToEvent.default;\n\n            el.addEventListener(eventType, e => {\n                const varName = el.getAttribute(`@bind${modifier}`).replace(\"this.data.\", \"\").replace(\"this.\", \"\");\n\n                const handler = handlers[elType] || handlers.default;\n                handler(instance, varName, e);\n\n                // If this element is @bind.render this call render()\n                if (modifier.includes(\".render\")) instance.render();\n            });\n        };\n\n        const modifiers = [\"\", ...permutations([\".render\"], true)];\n        modifiers.forEach(modifier => {\n            // Handle any binds on the root node\n            if (this.hasAttribute(`@bind${modifier}`)) {\n                bindData(this.root, modifier);\n            }\n\n            // Handle any binds on the children\n            const escapedModifier = modifier.replace(/\\./g, \"\\\\.\");\n            this.root.querySelectorAll(`[\\\\@bind${escapedModifier}]`).forEach(el => {\n                if (!this.belongsToController(el)) return;\n                bindData(el, modifier);\n            });\n        });\n    }\n\n    /**\n     * @method\n     * @private\n     * @name getElementType\n     * @memberof! Controller\n     * @description Return the type of an element\n     * @param {Element} el The DOM element to check\n     * @returns {String} The element type, e.g. 'input|text'\n     */\n    #getElementType(el) {\n        if (el.tagName.toLowerCase() === \"input\") {\n            return [el.tagName, el.type].map(item => item.toLowerCase()).join(\"|\");\n        }\n        return el.tagName.toLowerCase();\n    }\n\n    /**\n     * @method\n     * @private\n     * @name belongsToController\n     * @memberof! Controller\n     * @description Return true if the given element belongs to this controller\n     * @param {Element} el The controller root DOM element\n     * @returns {Boolean} True if the element belongs to the controller\n     */\n    belongsToController(el) {\n        // If we're using the shadow DOM then we only see this controllers children so it must belong to the controller\n        if (this.hasShadow) return true;\n\n        // Controllers don't belong to themselves, go up a level to find their parent\n        if (el.hasAttribute(\"data-controller\")) el = el.parentElement;\n\n        const closestController = el.closest(`[data-controller]`);\n        return closestController === this;\n    }\n\n    /**\n     * Helper debug function\n     * Only enabled when\n     *  - `window.__BINDER_DEBUG__` is set to `true`\n     *  - `window.__BINDER_DEBUG__` is an array on this controllers `localName` is present\n     * @param {Object} obj The data to log\n     */\n    debug(obj) {\n        let shouldLog = false;\n\n        if (window.__BINDER_DEBUG__ === true) shouldLog = true;\n        if (Array.isArray(window.__BINDER_DEBUG__) && window.__BINDER_DEBUG__.includes(this.localName)) shouldLog = true;\n\n        if (shouldLog) {\n            obj.controller = this;\n            console.debug(obj);\n        }\n    }\n}\n\nexport { Controller };\n"],"names":["kebabToCamel","permutations","parseDuration","parseBoolean","Controller","HTMLElement","handleShadow","template","querySelector","content","cloneNode","hasAttribute","debug","msg","attachShadow","mode","appendChild","root","shadowRoot","hasShadow","connectedCallback","isConnected","bind","args","hasOwnProperty","renderOnInit","init","autoRender","interval","setAutoRender","render","disconnectedCallback","_events","forEach","e","el","removeEventListener","eventType","event","attributeChangedCallback","name","oldValue","newValue","handler","replace","charAt","toUpperCase","slice","emit","eventName","detail","config","dispatchEvent","CustomEvent","bubbles","cancelable","composed","listenFor","target","callback","addEventListener","_internal","bound","bindArgs","bindEvents","bindDataValues","undefined","console","error","localName","autoRenderInterval","window","clearInterval","setInterval","rootNode","findRenderableElements","getAttribute","innerText","setAttribute","evalMode","replacerRegex","replacer","key","fn","Function","call","pos","split","filter","item","part","toString","innerHTML","belongsToController","parentElement","closestController","closest","obj","shouldLog","__BINDER_DEBUG__","Array","isArray","includes","controller","constructor","trim","self","observedAttributes","querySelectorAll","getAttributeNames","attr","value","bindEvent","modifier","action","callable","preventDefault","stopPropagation","type","push","node","findEventNodes","source","startsWith","modifiers","allNodes","length","nodesWithEvents","document","evaluate","eventNode","iterateNext","data","instance","tagToEvent","default","handlers","varName","checked","select","from","selectedOptions","map","bindData","elType","getElementType","escapedModifier","tagName","toLowerCase","join"],"mappings":"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"}