{"version":3,"sources":["../../../../src/static/js/binder/util.js"],"sourcesContent":["const pascalToKebab = str => str[0].toLowerCase() + str.slice(1, str.length).replace(/[A-Z0-9]/g, letter => `-${letter.toLowerCase()}`);\n\nconst kebabToCamel = str => str[0].toLowerCase() + str.slice(1, str.length).replace(/-([a-z0-9])/g, letter => `${letter[1].toUpperCase()}`);\n\n/**\n * Returns the permutations of an array for all combinations and lengths\n * @param {*} arr\n */\nconst permutations = (arr, toString = false) => {\n    // Group each chunk of permutations of each length\n    // ie. group all the length-1 permutations, and the length-2 permutations, etc...\n    let chunks = {};\n\n    // Add the initial array (length-1 permutations)\n    chunks[1] = arr.map(item => [item]);\n\n    // Add the permutations from length-2 to the full length of the initial array\n    for (let targetLen = 2; targetLen <= arr.length; targetLen++) {\n        let newChunk = [];\n\n        // Go through each permutation of the previous length\n        // and each value in the initial array\n        // If the permutation does not contain the current loop value then make a new permutation\n        // with the old permutation and the current loop value\n        for (let permutation of chunks[targetLen - 1]) {\n            for (let item of arr) {\n                if (permutation.includes(item)) continue;\n                newChunk.push([item, ...permutation]);\n            }\n        }\n\n        chunks[targetLen] = newChunk;\n    }\n\n    let results = Object.values(chunks);\n\n    // If we want the results as a flat list of strings (which we probably do)\n    // Then do it...\n    if (toString) {\n        let formattedResults = [];\n        for (let group of results) {\n            for (let permutation of group) {\n                formattedResults.push(permutation.join(\"\"));\n            }\n        }\n\n        return formattedResults;\n    }\n\n    return results;\n};\n\n/**\n * Parses a duration string and returns the time in milliseconds\n * Durations are in the form: ${duration: number}${unit: string}\n * EG.\n * 5ms => 5 milliseconds\n * 30s => 30 seconds\n * 5m => 5 minutes\n * 2h => 2 hours\n * @param {string} duration A string duration\n */\nconst parseDuration = duration => {\n    const [_, interval, unit] = /(\\d+)(\\w+)/.exec(duration);\n\n    // Calculate the duration in milliseconds\n    // Supported units are:\n    // ms: milliseconds\n    // s: seconds\n    // m: minutes\n    // h: hours\n    let timeout = 0;\n    switch (unit) {\n        case \"ms\":\n            timeout = interval;\n            break;\n        case \"s\":\n            timeout = interval * 1000;\n            break;\n        case \"m\":\n            timeout = interval * 1000 * 60;\n            break;\n        case \"h\":\n            timeout = interval * 1000 * 60 * 60;\n            break;\n    }\n\n    return timeout;\n};\n\n// Allows defining template literals with syntax highlighting\nconst template = (strings, ...values) => {\n    return strings.reduce((acc, str, i) => {\n        return acc + str + (values[i] || \"\");\n    }, \"\");\n};\n\n/**\n * Parse a string as a boolean\n * Falsey values are\n * - 0 or \"0\"\n * - false or \"false\" (case insensitive)\n * - null or undefined\n * NOTE: An empty string is **true**, this is so an empty HTML attribute is true, like normal HTML boolean attributes (eg. disabled and hidden)\n * @param {*} value\n * @returns {boolean}\n */\nconst parseBoolean = value => {\n    if (value === null || value === undefined) {\n        return false;\n    }\n\n    if (value === false) {\n        return false;\n    }\n\n    if (value === 0 || value === \"0\") {\n        return false;\n    }\n\n    if (value && value.toLowerCase && value.toLowerCase() === \"false\") {\n        return false;\n    }\n\n    return true;\n};\n\nexport { pascalToKebab, kebabToCamel, permutations, parseDuration, template as html, template as css, parseBoolean };\n"],"names":["pascalToKebab","str","toLowerCase","slice","length","replace","letter","kebabToCamel","toUpperCase","permutations","arr","toString","chunks","map","item","targetLen","newChunk","permutation","includes","push","results","Object","values","formattedResults","group","join","parseDuration","duration","_","interval","unit","exec","timeout","template","strings","reduce","acc","i","parseBoolean","value","undefined","html","css"],"mappings":"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"}